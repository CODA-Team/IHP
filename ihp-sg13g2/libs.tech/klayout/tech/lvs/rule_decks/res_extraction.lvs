# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#================================
# ---- RESISTOR EXTRACTIONS -----
#================================

logger.info('Starting RESISTOR EXTRACTION')

# ==============
# ---- POLY ----
# ==============

# rsil
logger.info('Extracting rsil resistor')
extract_devices(GeneralNTerminalExtractor.new('rsil', 2), {
                  'core' => rsil_res,
                  'ports' => rsil_ports,
                  'meas_mk' => polyres_drw,
                  'dev_mk' => polyres_drw.interacting(rsil_res),
                  'sub_mk' => pwell
                })
# rppd
logger.info('Extracting rppd resistor')
extract_devices(GeneralNTerminalExtractor.new('rppd', 2), {
                  'core' => rppd_res,
                  'ports' => rppd_ports,
                  'meas_mk' => polyres_drw,
                  'dev_mk' => polyres_drw.interacting(rppd_res),
                  'sub_mk' => pwell
                })

# rhigh
logger.info('Extracting rhigh resistor')
extract_devices(GeneralNTerminalExtractor.new('rhigh', 2), {
                  'core' => rhigh_res,
                  'ports' => rhigh_ports,
                  'meas_mk' => polyres_drw,
                  'dev_mk' => polyres_drw.interacting(rhigh_res),
                  'sub_mk' => pwell
                })

# ===============
# ---- METAL ----
# ===============

# RM1
logger.info('Extracting lvsres resistor')
extract_devices(resistor('lvsres', 1.0, RES2), { 'R' => lvsres, 'C' => metal1_con })
