#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#================================
# ------ BJT DERIVATIONS --------
#================================

logger.info('Starting BJT DERIVATIONS')

# =============
# ---- NPN ----
# =============

logger.info('Starting NPN-BJT DERIVATIONS')

bjt_exclude = gatpoly_drw.join(salblock_drw).join(polyres_drw)
                      .join(extblock_drw).join(nsd_drw).join(recog_diode)
                      .join(recog_esd).join(substrate_drw)

npn_exclude = nwell_drw.join(nbulay_drw).join(pwell_block).join(bjt_exclude)

# vnpn general nodes DERIVATIONS
npn_e = nactiv.and(trans_drw).not(npn_exclude)
npn_b = pactiv.and(pwell).and(trans_drw).not(npn_exclude)
npn_c = nactiv.and(trans_drw).not(npn_exclude)

# npn_10p00x10p00 nodes DERIVATIONS
npn13g2_e = npn_e.with_area(60.nm, 65.nm).interacting(npn_e.edges.with_length(70.nm, 90.nm))
npn13g2_b = npn_b.interacting(npn_b.extents.interacting(npn13g2_e))
npn13g2_c = npn_c.interacting(npn_c.extents.interacting(npn13g2_e))


# =============
# ---- PNP ----
# =============

logger.info('Starting PNP-BJT DERIVATIONS')

pnp_exclude = heattrans_drw.join(trans_drw).join(emwind_drw)
                .join(emwihv_drw).join(nsd_block).join(bjt_exclude)

# pnp general nodes DERIVATIONS
pnp_e = pactiv.and(nwell_iso).not(pnp_exclude)
pnp_b = nactiv.and(nwell_iso).not(pnp_exclude)
pnp_c = ptap.not(pnp_exclude)

# pnp_mpa nodes DERIVATIONS
pnp_mpa_e = pnp_e.and(pnp_b.extents).and(pnp_c.extents)
pnp_mpa_b = pnp_b.interacting(pnp_b.extents.interacting(pnp_mpa_e))
pnp_mpa_c = pnp_c.interacting(pnp_c.extents.interacting(pnp_mpa_e))
