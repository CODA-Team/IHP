# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

$logger = logger
$unit = dbu

#================================================
# -------------- CUSTOM COMBINER ----------------
#================================================

# common methods
module DeviceCombinerMethods
  private

  # A helper function to check whether two nets are the same
  def same_net(a, b, name)
    a_net = a.net_for_terminal(name)
    b_net = b.net_for_terminal(name)
    
    # same polarity
    same_po = a_net.cluster_id == b_net.cluster_id
    a_net && b_net && same_po
  end

  # A helper function to check whether two parameters have approximately the same value
  def same_parameter(a, b, name)
    (a.parameter(name) - b.parameter(name)).abs < 1e-9
  end
end

class MIMCAPNDeviceCombiner < RBA::GenericDeviceCombiner

  include DeviceCombinerMethods

  # Method to check and perform device combination
  def combine_devices(a, b)
    # Check if mim_top and mim_btm terminals have the same net
    return false unless same_net(a, b, "mim_top") && same_net(a, b, "mim_btm")

    # Check if W and L parameters are the same
    return false unless same_parameter(a, b, "w") && same_parameter(a, b, "l")

    # Combine by summing up 'm' parameter
    a.set_parameter("m", a.parameter("m") + b.parameter("m"))

    # Disconnect the second device and let the system clean it up
    b.disconnect_terminal("mim_top")
    b.disconnect_terminal("mim_btm")
    
    # Disconnect mim_sub terminal if present and model name includes 'rfcmim'
    b.disconnect_terminal("mim_sub") if b.name.downcase.include?('rfcmim')

    true
  end

end

class DiodeDeviceCombiner < RBA::GenericDeviceCombiner

  include DeviceCombinerMethods

  # Method to check and perform device combination
  def combine_devices(a, b)
    # Check if mim_top and mim_btm terminals have the same net
    return false unless same_net(a, b, "A") && same_net(a, b, "C")

    # Check if W and L parameters are the same
    return false unless same_parameter(a, b, "A") && same_parameter(a, b, "P")

    # Combine by summing up 'm' parameter
    a.set_parameter("m", a.parameter("m") + b.parameter("m"))

    # Disconnect the second device and let the system clean it up
    b.disconnect_terminal("A")
    b.disconnect_terminal("C")

    true
  end
end

class BJTDeviceCombiner < RBA::GenericDeviceCombiner
  include DeviceCombinerMethods

  # Method to check and perform device combination
  def combine_devices(a, b)
    bjt3_nets = ["C", "B", "E"]
    bjt4_nets = ["C", "B", "E", "S"]
    
    # Determine the correct nets based on device type (assuming PNP or NPN)
    bjt_nets = a.device_class.name.downcase.include?('pnp') ? bjt3_nets : bjt4_nets

    # Check if terminals have the same net
    return false unless bjt_nets.all? { |net| same_net(a, b, net) }

    # Check if W and L parameters are the same
    return false unless ["AE", "PE"].all? { |param| same_parameter(a, b, param) }

    # Combine parameters
    a.set_parameter("m", a.parameter("m") + b.parameter("m"))
    a.set_parameter("NE", a.parameter("NE") + b.parameter("NE"))

    # Disconnect the second device and let the system clean it up
    bjt_nets.each { |term| b.disconnect_terminal(term) }

    true
  end
end
