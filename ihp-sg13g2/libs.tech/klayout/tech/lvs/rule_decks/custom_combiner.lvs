# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

$logger = logger
$unit = dbu

#================================================
# -------------- CUSTOM COMBINER ----------------
#================================================

# common methods
module DeviceCombinerMethods
  private

  # A helper function to check whether two nets are the same
  def same_net(a, b, name)
    a_net = a.net_for_terminal(name)
    b_net = b.net_for_terminal(name)
    a_net && b_net && a_net.cluster_id == b_net.cluster_id
  end

  # A helper function to check whether two nets share same diffusion
  def same_diffusion(a, b, net1, net2)
    a_net1 = a.net_for_terminal(net1)
    a_net2 = a.net_for_terminal(net2)
    b_net1 = b.net_for_terminal(net1)
    b_net2 = b.net_for_terminal(net2)
    a_net && b_net && a_net1.cluster_id == b_net2.cluster_id && a_net2.cluster_id == b_net1.cluster_id
  end

  # A helper function to check whether two parameters have approximately the same value
  def same_parameter(a, b, name)
    (a.parameter(name) - b.parameter(name)).abs < 1e-9
  end
end

class MOSDeviceCombiner < RBA::GenericDeviceCombiner

  include DeviceCombinerMethods

  # Method to check and perform device combination
  def combine_devices(a, b)
    # Check if G and B terminals have the same net
    return false unless same_net(a, b, "G") && same_net(a, b, "B")

    # Determine whether m_en or ng_en condition is satisfied
    m_en = same_net(a, b, "D") && same_net(a, b, "S")
    ng_en = same_diffusion(a, b, "D", "S")

    # Check if W and L parameters are the same
    return false unless ["W", "L"].all? { |param| same_parameter(a, b, param) }

    # Combine by summing up 'm' or 'ng' parameter based on condition
    if m_en
      a.set_parameter("m", a.parameter("m") + b.parameter("m"))
    elsif ng_en
      a.set_parameter("ng", a.parameter("ng") + b.parameter("ng"))
    end

    # Disconnect the second device and let the system clean it up
    ["D", "G", "S", "B"].each { |term| b.disconnect_terminal(term) }

    true
  end

end

class MIMCAPNDeviceCombiner < RBA::GenericDeviceCombiner

  include DeviceCombinerMethods

  # Method to check and perform device combination
  def combine_devices(a, b)
    # Check if mim_top and mim_btm terminals have the same net
    return false unless same_net(a, b, "mim_top") && same_net(a, b, "mim_btm")

    # Check if W and L parameters are the same
    return false unless same_parameter(a, b, "w") && same_parameter(a, b, "l")

    # Combine by summing up 'm' parameter
    a.set_parameter("m", a.parameter("m") + b.parameter("m"))

    # Disconnect the second device and let the system clean it up
    b.disconnect_terminal("mim_top")
    b.disconnect_terminal("mim_btm")
    
    # Disconnect mim_sub terminal if present and model name includes 'rfcmim'
    b.disconnect_terminal("mim_sub") if b.name.downcase.include?('rfcmim')

    true
  end

end
