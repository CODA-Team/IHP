#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#================================
# ------- BJT EXTRACTION --------
#================================

logger.info('Starting BJT EXTRACTION')

# =============
# ---- NPN ----
# =============

logger.info('Starting NPN-BJT EXTRACTION')

# npn13G2 BJT
logger.info('Extraction of npn13G2 BJT transistor')
extract_devices(GeneralNTerminalExtractor.new('npn13G2', 3), {
                  'seed' => emwind_drw.and(npn13G2_e),
                  'ports' => npn13G2_ports,
                  'meas_mk' => emwind_drw.and(npn13G2_e),
                  'dev_mk' => trans_drw.interacting(npn13G2_e),
                  'sub_mk' => npn_sub,
                })

# npn13G2L BJT
logger.info('Extraction of npn13G2L BJT transistor')
extract_devices(GeneralNTerminalExtractor.new('npn13G2L', 3), {
                  'seed' => emwind_drw.and(npn13G2l_e),
                  'ports' => npn13G2l_ports,
                  'meas_mk' => emwind_drw.and(npn13G2l_e),
                  'dev_mk' => trans_drw.interacting(npn13G2l_e),
                  'sub_mk' => npn_sub,
                })

# npn13G2V BJT
logger.info('Extraction of npn13G2V BJT transistor')
extract_devices(GeneralNTerminalExtractor.new('npn13G2V', 3), {
                  'seed' => emwihv_drw.and(npn13G2v_e),
                  'ports' => npn13G2v_ports,
                  'meas_mk' => emwind_drw.and(npn13G2v_e),
                  'dev_mk' => trans_drw.interacting(npn13G2v_e),
                  'sub_mk' => npn_sub,
                })

# =============
# ---- PNP ----
# =============

logger.info('Starting PNP-BJT EXTRACTION')

# pnp_mpa BJT
logger.info('Extracting pnpMPA BJT')
extract_devices(bjt3('pnpMPA'), { 'C' => pnp_mpa_c.extents,
                                'B' => pnp_mpa_b.extents,
                                'E' => pnp_mpa_e,
                                'tC' => pnp_mpa_c,
                                'tB' => pnp_mpa_b,
                                'tE' => pnp_mpa_e })
