# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#===============================
# ---- Inductor DERIVATIONS ----
#===============================

logger.info('Starting Inductor DERIVATIONS')

ind_exc = gatpoly_drw.join(pwell).join(nsd_drw)
            .join(nbulay_drw).join(thickgateox_drw).join(heattrans_drw)
            .join(emwind_drw).join(emwihv_drw).join(heatres_drw)
            .join(salblock_drw).join(polyres_drw).join(mim_drw)
            .join(extblock_drw).join(res_drw).join(activ_mask)
            .join(recog_diode).join(recog_esd).join(substrate_drw)

# General
ind_edges = ind_drw.edges
ind_core_ = topmetal2_drw.join(topmetal1_drw).and(pwell_block)
            .and(ind_drw).merged.not(ind_exc)
ind_ports_ = ind_pin.and(ind_core_).interacting(ind_edges)
ind_port_la = ind_ports_.interacting(ind_text.texts("LA"))
ind_port_lb = ind_ports_.interacting(ind_text.texts("LB"))
ind_port_lc = ind_ports_.interacting(ind_text.texts("LC"))

# inductor2
ind2_ports = ind_port_la.join(ind_port_lb)
ind2_core = ind_core_.interacting(ind_port_la, 1).interacting(ind_port_lb, 1)
ind2_mk = ind_drw.interacting(ind2_core).interacting(ind2_ports).not_interacting(ind_port_lc)
ind2_sub = pwell_block.and(ind_drw).interacting(ind2_core)

# inductor3
ind3_ports = ind_port_la.join(ind_port_lb).join(ind_port_lc)
ind3_core = ind_core_.interacting(ind_port_la, 1).interacting(ind_port_lb, 1).interacting(ind_port_lc, 1)
ind3_mk = ind_drw.interacting(ind3_core).interacting(ind3_ports)
ind3_sub = pwell_block.and(ind_drw).interacting(ind3_core)
